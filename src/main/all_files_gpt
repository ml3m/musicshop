package com.musicshop;

import com.musicshop.models.Album;
import com.musicshop.models.Instrument;
import com.musicshop.models.MusicItem;
import com.musicshop.models.Order;
import com.musicshop.models.Customer;
import com.musicshop.services.InventoryServiceImpl;
import com.musicshop.services.MusicServiceImpl;
import com.musicshop.services.OrderServiceInterface;
import com.musicshop.exceptions.InvalidItemException;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class MainMenu {
    private final MusicServiceImpl musicService;
    private final InventoryServiceImpl inventoryService;
    private final OrderServiceInterface orderService;  // Use OrderServiceInterface
    private final Scanner scanner;

    public MainMenu(MusicServiceImpl musicService, InventoryServiceImpl inventoryService, OrderServiceInterface orderService) {
        this.musicService = musicService;
        this.inventoryService = inventoryService;
        this.orderService = orderService;
        this.scanner = new Scanner(System.in);
    }

    public void start() {
        boolean running = true;
        while (running) {
            showMenu();
            int choice = getUserChoice();
            switch (choice) {
                case 1 -> addItem();
                case 2 -> removeItem();
                case 3 -> viewItems();
                case 4 -> createOrder();
                case 5 -> viewOrders();
                case 0 -> {
                    System.out.println("Exiting program...");
                    running = false;
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private void showMenu() {
        System.out.println("\n--- Music Shop Management System ---");
        System.out.println("1. Add Item to Inventory");
        System.out.println("2. Remove Item from Inventory");
        System.out.println("3. View Inventory");
        System.out.println("4. Create Order");
        System.out.println("5. View Orders");
        System.out.println("0. Exit");
        System.out.print("Select an option: ");
    }

    private int getUserChoice() {
        try {
            return scanner.nextInt();
        } catch (InputMismatchException e) {
            scanner.next();  // Clear invalid input
            System.out.println("Invalid input. Please enter a number.");
            return -1;
        }
    }

    private void addItem() {
        System.out.println("Choose item type: 1. Instrument  2. Album");
        int type = getUserChoice();
        scanner.nextLine();  // Consume newline

        try {
            if (type == 1) {
                String type_selected_jsonID = "instrument";

                System.out.print("Enter Instrument name: ");
                String name = scanner.nextLine();
                System.out.print("Enter Instrument price: ");
                double price = scanner.nextDouble();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter Instrument type (e.g., Guitar, Piano): ");
                String instrumentType = scanner.nextLine();

                MusicItem instrument = new Instrument(name, price, type_selected_jsonID);
                musicService.addItem(instrument);

                System.out.println("Instrument added to inventory.");

            } else if (type == 2) {
                String type_selected_jsonID = "album";

                System.out.print("Enter Album name: ");
                String name = scanner.nextLine();
                System.out.print("Enter Album price: ");
                double price = scanner.nextDouble();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter Album artist: ");
                String artist = scanner.nextLine();
                System.out.print("Enter Album release year: ");
                int releaseYear = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter Album type (e.g., Vinyl, CD): ");
                String albumType = scanner.nextLine();

                MusicItem album = new Album(name, price, artist, releaseYear, type_selected_jsonID);
                musicService.addItem(album);

                System.out.println("Album added to inventory.");
            } else {
                System.out.println("Invalid item type selected.");
            }
        } catch (InvalidItemException | InputMismatchException e) {
            System.out.println("Failed to add item: " + e.getMessage());
            scanner.nextLine();  // Clear invalid input if any
        }
    }

    private void removeItem() {
        System.out.print("Enter name of the item to remove: ");
        scanner.nextLine();  // Consume newline
        String itemName = scanner.nextLine();

        try {
            musicService.removeItem(itemName);
            System.out.println("Item removed from inventory.");
        } catch (InvalidItemException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void viewItems() {
        List<MusicItem> items = inventoryService.getItems();
        if (items.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            System.out.println("\n--- Inventory List ---");
            items.forEach(System.out::println);
        }
    }

    private void createOrder() {
        System.out.print("Enter customer ID: ");
        scanner.nextLine();  // Consume newline
        String customerId = scanner.nextLine();
        System.out.print("Enter customer name: ");
        String customerName = scanner.nextLine();

        Customer customer = new Customer(customerId, customerName);
        Order order = new Order(customer);

        boolean addingItems = true;
        while (addingItems) {
            System.out.println("Choose product to add to cart:");
            List<MusicItem> items = inventoryService.getItems();
            for (int i = 0; i < items.size(); i++) {
                System.out.println((i + 1) + ". " + items.get(i).getName() + " - $" + items.get(i).getPrice());
            }
            System.out.print("Select product number (or 0 to finish): ");
            int productChoice = getUserChoice();
            if (productChoice == 0) {
                addingItems = false;
            } else if (productChoice > 0 && productChoice <= items.size()) {
                MusicItem item = items.get(productChoice - 1);
                order.addItem(item);
                System.out.println(item.getName() + " added to cart.");
            } else {
                System.out.println("Invalid selection.");
            }
        }

        orderService.processOrder(order);  // Process the order
        orderService.saveOrders(orderService.getAllOrders());  // Save orders after processing
        System.out.println("Order processed and saved successfully.");
    }

    private void viewOrders() {
        List<Order> orders = orderService.getAllOrders();
        if (orders.isEmpty()) {
            System.out.println("No orders found.");
        } else {
            System.out.println("\n--- Order List ---");
            orders.forEach(System.out::println);
        }
    }
}
package com.musicshop.models;

import java.util.List;
import java.util.ArrayList;
import java.util.UUID;

public class Order {
    private String orderId;
    private Customer customer;
    private List<MusicItem> cartItems;
    private double totalAmount;

    // Constructor
    public Order(String orderId, Customer customer, List<MusicItem> cartItems) {
        this.orderId = orderId;
        this.customer = customer;
        this.cartItems = cartItems;
        this.totalAmount = calculateTotalAmount();
    }

    // Constructor for creating a new order with just a customer
    public Order(Customer customer) {
        this.orderId = generateOrderId();
        this.customer = customer;
        this.cartItems = new ArrayList<>(); // Initialize an empty cart
        this.totalAmount = 0.0;
    }

    // Generate a unique order ID
    private String generateOrderId() {
        return "ORD-" + UUID.randomUUID();
    }

    // Method to calculate the total amount of the order
    private double calculateTotalAmount() {
        double total = 0.0;
        for (MusicItem item : cartItems) {
            total += item.getPrice();
        }
        return total;
    }

    // Method to add an item to the order
    public void addItem(MusicItem item) {
        this.cartItems.add(item);
        this.totalAmount = calculateTotalAmount(); // Update total amount after adding item
    }

    public String getOrderId() {
        return orderId;
    }

    public Customer getCustomer() {
        return customer;
    }

    public List<MusicItem> getCartItems() {
        return cartItems;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    @Override
    public String toString() {
        return "Order ID: " + orderId + ", Customer: " + customer.getName() + ", Total Amount: $" + totalAmount;
    }
}
package com.musicshop.models;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes;

@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "type"  // This is the key for the subtype
)
@JsonSubTypes({
    @JsonSubTypes.Type(value = Album.class, name = "album"),
    @JsonSubTypes.Type(value = Instrument.class, name = "instrument")
})
public abstract class MusicItem {
    protected String name;
    protected double price;

    // Constructor
    public MusicItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Price: $" + price;
    }
}
package com.musicshop.models;

public class Customer {
    private String id;
    private String name;

    public Customer(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name;
    }
}
package com.musicshop.models;

public class Album extends MusicItem {
    private String artist;
    private String type;
    private int year;

    // Default constructor for Jackson
    public Album() {
        super(null, 0.0);
        this.type = "album";
    }

    public Album(String name, double price, String artist, int year, String type) {
        super(name, price);
        this.artist = artist;
        this.year = year;
        this.type = type;
    }

    public String getName() {
        return super.getName();
    }
    public double getPrice(){
        return super.getPrice();
    }

    public String getType() {
        return type;
    }

    public String getArtist() {
        return artist;
    }

    public int getYear() {
        return year;
    }

    @Override
    public String toString() {
        return super.toString() + ", Artist: " + artist + ", Year: " + year;
    }
}
package com.musicshop.models;

public class Instrument extends MusicItem {
    private String type;

    // Default constructor for Jackson
    public Instrument() {
        super(null, 0.0);
        this.type = "instrument";
    }

    public Instrument(String name, double price, String type) {
        super(name, price);
        this.type = type;
    }

    public String getType() {
        return type;
    }

    @Override
    public String toString() {
        return super.toString() + ", Type: " + type;
    }
}
package com.musicshop.exceptions;

public class CustomerNotFoundException extends RuntimeException {
    public CustomerNotFoundException(String message) {
        super(message);
    }
}
package com.musicshop.exceptions;

public class InvalidItemException extends RuntimeException {
    public InvalidItemException(String message) {
        super(message);
    }
}
package com.musicshop;

import com.musicshop.services.FileStorageService;
import com.musicshop.services.InventoryServiceImpl;
import com.musicshop.services.MusicServiceImpl;
import com.musicshop.services.OrderServiceInterface;
import com.musicshop.services.OrderServiceImpl;

public class Main {
    public static void main(String[] args) {
        // Instantiate the file storage service
        FileStorageService fileStorageService = new FileStorageService();

        // Instantiate the inventory service with file storage for automatic load/save
        InventoryServiceImpl inventoryService = new InventoryServiceImpl(fileStorageService);

        // Instantiate the music service, passing the inventory service
        MusicServiceImpl musicService = new MusicServiceImpl(inventoryService);

        // Instantiate the order service implementation
        OrderServiceImpl orderService = new OrderServiceImpl();

        // Pass all services to MainMenu
        MainMenu mainMenu = new MainMenu(musicService, inventoryService, orderService);

        // Start the application
        mainMenu.start();
    }
}
package com.musicshop.services;

import com.musicshop.models.MusicItem;
import com.musicshop.exceptions.InvalidItemException;

public class MusicServiceImpl implements MusicService {
    private InventoryServiceImpl inventoryService;

    public MusicServiceImpl(InventoryServiceImpl inventoryService) {
        this.inventoryService = inventoryService;
    }

    @Override
    public void addItem(MusicItem item) {
        if (item == null || item.getPrice() < 0) {
            throw new InvalidItemException("Invalid item details");
        }
        inventoryService.addItem(item);
    }

    @Override
    public void removeItem(String itemName) {
        if (inventoryService.findItemByName(itemName) == null) {
            throw new InvalidItemException("Item not found in inventory");
        }
        inventoryService.removeItem(itemName);
    }
}

// File: com/musicshop/services/FileStorageService.java
package com.musicshop.services;

import com.musicshop.models.Order;
import com.musicshop.models.MusicItem;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.core.type.TypeReference;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class FileStorageService {
    private static final String INVENTORY_FILE_PATH = "inventory.json";
    private static final String ORDERS_FILE_PATH = "orders.json";
    private final ObjectMapper objectMapper;

    public FileStorageService() {
        objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT); // Pretty print JSON
    }

    // Load items from the inventory JSON file
    public List<MusicItem> loadItems() {
        try {
            File file = new File(INVENTORY_FILE_PATH);
            if (!file.exists()) {
                return new ArrayList<>();
            }
            return objectMapper.readValue(file, new TypeReference<List<MusicItem>>() {});
        } catch (IOException e) {
            System.out.println("Error loading items from JSON: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    // Save items to the inventory JSON file
    public void saveItems(List<MusicItem> items) {
        try {
            objectMapper.writeValue(new File(INVENTORY_FILE_PATH), items);
            System.out.println("Inventory saved to JSON file.");
        } catch (IOException e) {
            System.out.println("Error saving items to JSON: " + e.getMessage());
        }
    }

    // Append a single item to the inventory JSON file
    public void appendItem(MusicItem item) {
        try {
            // Load current inventory
            List<MusicItem> items = loadItems();
            // Add new item
            items.add(item);
            // Save updated inventory
            saveItems(items);
            System.out.println("Item appended to inventory.");
        } catch (Exception e) {
            System.out.println("Error appending item to inventory: " + e.getMessage());
        }
    }

    // Clear all items in the inventory JSON file
    public void clearAllItems() {
        try {
            saveItems(new ArrayList<>()); // Save an empty list to clear the file
            System.out.println("All items cleared from inventory.");
        } catch (Exception e) {
            System.out.println("Error clearing inventory: " + e.getMessage());
        }
    }

    // Load orders from orders JSON file
    public List<Order> loadOrders() {
        try {
            File file = new File(ORDERS_FILE_PATH);
            if (!file.exists()) {
                return new ArrayList<>();
            }
            return objectMapper.readValue(file, new TypeReference<List<Order>>() {});
        } catch (IOException e) {
            System.out.println("Error loading orders from JSON: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    // Save orders to orders JSON file
    public void saveOrders(List<Order> orders) {
        try {
            objectMapper.writeValue(new File(ORDERS_FILE_PATH), orders);
            System.out.println("Orders saved to JSON file.");
        } catch (IOException e) {
            System.out.println("Error saving orders to JSON: " + e.getMessage());
        }
    }
}
package com.musicshop.services;

import com.musicshop.models.MusicItem;

public interface MusicService {
    void addItem(MusicItem item);
    void removeItem(String itemName);
}
package com.musicshop.services;

import com.musicshop.models.Order;
import java.util.List;

public class OrderServiceImpl implements OrderServiceInterface {
    private static final String ORDER_FILE_PATH = "orders.json";
    private final ObjectMapper objectMapper;

    public OrderServiceImpl() {
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public void processOrder(Order order) {
        // Process order (You can add your logic for processing here)
        System.out.println("Processing order for customer: " + order.getCustomer().getName());
    }

    @Override
    public List<Order> getAllOrders() {
        try {
            File file = new File(ORDER_FILE_PATH);
            if (file.exists()) {
                return objectMapper.readValue(file, objectMapper.getTypeFactory().constructCollectionType(List.class, Order.class));
            }
        } catch (IOException e) {
            System.out.println("Error loading orders: " + e.getMessage());
        }
        return null;
    }

    public void saveOrders(List<Order> orders) {
        try {
            objectMapper.writeValue(new File(ORDER_FILE_PATH), orders);
        } catch (IOException e) {
            System.out.println("Error saving orders: " + e.getMessage());
        }
    }

    public List<Order> loadOrders() {
        try {
            File file = new File(ORDER_FILE_PATH);
            if (file.exists()) {
                return objectMapper.readValue(file, objectMapper.getTypeFactory().constructCollectionType(List.class, Order.class));
            }
        } catch (IOException e) {
            System.out.println("Error loading orders: " + e.getMessage());
        }
        return null;
    }
}
package com.musicshop.services;

import com.musicshop.models.Order;
import java.util.List;

public interface OrderServiceInterface {
    void processOrder(Order order);
    List<Order> getAllOrders();
    Order findOrderByCustomerId(String customerId);
}
package com.musicshop.services;

import com.musicshop.models.Order;
import com.musicshop.models.MusicItem;
import com.musicshop.models.Customer;

import java.util.ArrayList;
import java.util.List;

public class OrderService {
    private final FileStorageService fileStorageService;

    public OrderService(FileStorageService fileStorageService) {
        this.fileStorageService = fileStorageService;
    }

    // Place an order
    public void placeOrder(Customer customer, List<MusicItem> cartItems) {
        String orderId = generateOrderId();
        Order newOrder = new Order(orderId, customer, cartItems);
        saveOrder(newOrder);
        System.out.println("Order placed successfully.");
    }

    // Generate a unique order ID
    private String generateOrderId() {
        return "ORD" + System.currentTimeMillis();
    }

    // Save order to file
    private void saveOrder(Order order) {
        List<Order> orders = loadOrders();
        orders.add(order);
        fileStorageService.saveOrders(orders);
    }

    // Load all orders
    public List<Order> loadOrders() {
        return fileStorageService.loadOrders();
    }
}
package com.musicshop.services;

import com.musicshop.models.MusicItem;
import java.util.List;

public interface InventoryService {
    List<MusicItem> getItems();
    MusicItem findItemByName(String name);
}
package com.musicshop.services;

import com.musicshop.models.MusicItem;
import java.util.List;
import java.util.ArrayList;

public class InventoryServiceImpl implements InventoryService {
    private final List<MusicItem> inventory;
    private final FileStorageService fileStorageService;

    public InventoryServiceImpl(FileStorageService fileStorageService) {
        this.inventory = new ArrayList<>();
        this.fileStorageService = fileStorageService;

        // Load items from JSON into memory on initialization
        List<MusicItem> loadedItems = fileStorageService.loadItems();
        inventory.addAll(loadedItems); // Populate in-memory inventory
    }

    @Override
    public List<MusicItem> getItems() {
        return new ArrayList<>(inventory); // Return a copy to avoid external modifications
    }

    @Override
    public MusicItem findItemByName(String name) {
        return inventory.stream()
                .filter(item -> item.getName().equalsIgnoreCase(name))
                .findFirst()
                .orElse(null);
    }

    public void addItem(MusicItem item) {
        inventory.add(item); 
        fileStorageService.appendItem(item); // Append single item to file
    }

    public void removeItem(String itemName) {
        inventory.removeIf(item -> item.getName().equalsIgnoreCase(itemName));
        fileStorageService.saveItems(inventory); // Save full inventory after removal
    }

    public void clearItems() {
        inventory.clear();
        fileStorageService.clearAllItems(); // Clear the JSON file
    }
}
